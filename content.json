{"meta":{"title":"THINK TWICE","subtitle":null,"description":null,"author":"yzc","url":"http://blog.yzcthinktwice.com"},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2019-10-23T16:29:35.814Z","comments":false,"path":"about/index.html","permalink":"http://blog.yzcthinktwice.com/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2019-10-23T16:29:35.816Z","comments":false,"path":"client/index.html","permalink":"http://blog.yzcthinktwice.com/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2019-11-09T14:20:26.219Z","comments":false,"path":"bangumi/index.html","permalink":"http://blog.yzcthinktwice.com/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2019-10-23T16:29:35.816Z","comments":true,"path":"comment/index.html","permalink":"http://blog.yzcthinktwice.com/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2019-10-23T16:29:35.817Z","comments":false,"path":"donate/index.html","permalink":"http://blog.yzcthinktwice.com/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2019-10-23T16:29:35.817Z","comments":false,"path":"lab/index.html","permalink":"http://blog.yzcthinktwice.com/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2019-11-23T14:31:23.679Z","comments":false,"path":"music/index.html","permalink":"http://blog.yzcthinktwice.com/music/index.html","excerpt":"","text":"我的收藏 天气之子海上钢琴师","keywords":"喜欢的音乐"},{"title":"links","date":"2019-10-27T15:11:06.000Z","updated":"2019-10-27T14:44:38.022Z","comments":true,"path":"links/index.html","permalink":"http://blog.yzcthinktwice.com/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2019-10-23T16:29:35.820Z","comments":true,"path":"rss/index.html","permalink":"http://blog.yzcthinktwice.com/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2019-10-23T16:29:35.821Z","comments":true,"path":"tags/index.html","permalink":"http://blog.yzcthinktwice.com/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2019-10-23T16:29:35.822Z","comments":false,"path":"theme-sakura/index.html","permalink":"http://blog.yzcthinktwice.com/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2019-10-23T16:29:35.822Z","comments":false,"path":"video/index.html","permalink":"http://blog.yzcthinktwice.com/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"YOJ1 二人从空中落下","slug":"YOJ1 二人从空中落下","date":"2019-11-25T12:04:01.000Z","updated":"2019-11-25T12:44:08.583Z","comments":true,"path":"2019/11/25/YOJ1 二人从空中落下/","link":"","permalink":"http://blog.yzcthinktwice.com/2019/11/25/YOJ1 二人从空中落下/","excerpt":"","text":"YOJ1 二人从空中落下 暂时没时间放上YOJ，先寄存在luogu上 几乎全原创的一道题，感受到了出题的艰难。。。 欢迎各位帮忙验题！ 题意:现有n个无区别的点，他们可能随机连边成为一棵特殊的树 这种树满足它的每个非叶子节点都有且只有两个儿子 现给出a和b 问这些点所生成的所有特殊的树，能满足高度$\\in\\left [ a,b \\right ]$的概率是多少（约定单个节点高度为1） 对998244353取模 题解：灵感来源于P1472奶牛家谱 一道简短的dp，暴力给了30 SUB1：a与b正好卡满所有可能情况，100%能安全降落 输出1即可 SUB2：从1到(n+1)/2枚举降落点进行爆搜 给出暴力的大致代码： int dfs(int cnt, int height){ if (cnt == 1) return height == 1; if (height &gt; (cnt + 1) / 2) return 0; if (height &lt;= 1) return 0; int state=0; for (int i(1); i &lt; cnt; i += 2){ for (int j(1); j &lt; height; ++j){ state += dfs(i, height - 1) * dfs(cnt - i - 1, j); state %= MOD; if (height - 1 != j){ state += dfs(i, height - 1) * dfs(cnt - i - 1, j); state %= MOD; } } } return state; } signed main(){ scanf(&quot;%lld%lld%lld&quot;, &amp;n, &amp;a,&amp;b); m=n+1&gt;&gt;1; if(a&gt;m){ puts(&quot;0&quot;); return 0; } if(a==ceil(log2(n+1))&amp;&amp;b==m){ puts(&quot;1&quot;); return 0; } b=min(b,m); for(int i=1;i&lt;=m;i++) s[i]=s[i-1]+dfs(n,i); cout&lt;&lt;(((s[b]-s[a-1])%mod+mod)%mod)*fpow(s[m],mod-2,mod)%mod; return 0; } SUB3：给想出标程但没处理b导致RE的人 SUB4：给想出标程但没有差分答案的人 标算：令m=(n+1)/2 画图易知m是n个点的最大合法深度 设f[i][j]表示i个点深度小于等于j的树有几种 初始f[1][]=1 转移$O(n^2*m)$ 三层循环分别枚举深度，枚举总点数，枚举左子树分配点数 $f[i][k]=sum{f[j][k-1]*f[i-j-1][k-1]}$ 若j为左子树点数则i-j-1为右子树点数 乘法原理，两者相乘 答案的分子部分显然可以由f[n][b]-f[n][a-1]差分得到 而分母部分就是f[n][m] 要注意的是，有些点a,b很大，需要特判： 若a&gt;m则输出0，因为一种都不满足 否则若b&gt;m则需要先将b取min改为m再继续做，以防止RE爆下标，因为&gt;m的部分都一定是不满足的 代码：#include &lt;bits/stdc++.h&gt; using namespace std; template&lt;class t&gt; inline t read(t &amp;x){ x=0;char c=getchar();bool f=0; while(!isdigit(c)) f|=c==&#39;-&#39;,c=getchar(); while(isdigit(c)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(c^48),c=getchar(); if(f) x=-x;return x; } template&lt;class t&gt; inline void write(t x){ if(x&lt;0){putchar(&#39;-&#39;),write(-x);} else{if(x&gt;9)write(x/10);putchar(&#39;0&#39;+x%10);} } #define int long long const int N=1005,mod=998244353; int n,m,f[N][605],a,b; int fpow(int x,int y,int mod){ int res=1; for(;y;y&gt;&gt;=1,mod?(x*=x)%=mod:x*=x) if(y&amp;1) mod?(res*=x)%=mod:res*=x; return res; } signed main(){ read(n);read(a);read(b); m=(n+1)&gt;&gt;1; if(a&gt;m){ //对a特判 puts(&quot;0&quot;); return 0; } b=min(b,m); //对b特判 for(int i=1;i&lt;=m;i++) f[1][i]=1; //初始 for(int k=1;k&lt;=m;k++) //枚举深度 for(int i=3;i&lt;=n;i+=2) //枚举总点数 for(int j=1;j&lt;i;j+=2) //枚举左子树分配点数 (f[i][k]+=f[j][k-1]*f[i-j-1][k-1]%mod)%=mod; //累加 write((((f[n][b]-f[n][a-1])%mod+mod)%mod)*fpow(f[n][m],mod-2,mod)%mod); //差分得答案 }","categories":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}],"tags":[{"name":"dp","slug":"dp","permalink":"http://blog.yzcthinktwice.com/tags/dp/"},{"name":"YOJ","slug":"YOJ","permalink":"http://blog.yzcthinktwice.com/tags/YOJ/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}]},{"title":"ABC146F Sugoroku","slug":"ABC146F Sugoroku","date":"2019-11-25T00:31:01.000Z","updated":"2019-11-25T12:01:56.338Z","comments":true,"path":"2019/11/25/ABC146F Sugoroku/","link":"","permalink":"http://blog.yzcthinktwice.com/2019/11/25/ABC146F Sugoroku/","excerpt":"","text":"ABC146F Sugoroku 题意：给定一个01串，从0出发，恰好到达n胜利，每次能走1~m步，且数字为1的位置不能走 问字典序最小的行走方法（即不仅走的次数要少，且越靠前走的步数越要少） 题解：套路题，思路不算难想 step 1:先设计dp考虑走的次数尽可能少的条件 设f[i]表示到i位置的最少步数 初始f[]=oo,f[0]=0 转移$f_i=\\min \\left \\{ f_j|i-j&lt;=m \\right \\}+1 (a_i==0)$ 复杂度$O(nm)$ 考虑优化dp 发现min部分就是个滑动窗口，于是上单调队列 复杂度降为$O(n)$ step2:考虑题目的另一个要求：靠前的步数要尽可能少 因为总步数不变，靠前的要少，也就是说靠后的要多 也就是用g[]记录每次dp转移是从哪个位置转来的，如有相同则取前者转移 最后在dp后倒着从g[n]开始遍历，类似链表，每次g[n]与n的差就是这次走的步数 反着输出即可 代码实现也很简单，因为单调队列的先进后出的性质可以保证队首的下标是最小的，直接塞到g[]中即可 代码：#include &lt;bits/stdc++.h&gt; using namespace std; template&lt;class t&gt; inline t read(t &amp;x){ x=0;char c=getchar();bool f=0; while(!isdigit(c)) f|=c==&#39;-&#39;,c=getchar(); while(isdigit(c)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(c^48),c=getchar(); if(f) x=-x;return x; } template&lt;class t&gt; inline void write(t x){ if(x&lt;0){putchar(&#39;-&#39;),write(-x);} else{if(x&gt;9)write(x/10);putchar(&#39;0&#39;+x%10);} } const int N=1e5+5; int n,m,a[N],f[N],g[N]; deque&lt;int&gt; q; vector&lt;int&gt; ans; signed main(){ read(n);read(m); for(int i=0;i&lt;=n;i++) scanf(&quot;%1d&quot;,&amp;a[i]),f[i]=0x3f3f3f3f; f[0]=0; f[n+1]=0x3f3f3f3f; q.push_back(0); //先塞个0进去 for(int i=1;i&lt;=n;i++) if(!a[i]){ //转移先决条件 g[i]=n+1; while(!q.empty()&amp;&amp;q.front()+m&lt;i) q.pop_front(); //维护单调队列 if(!q.empty()) g[i]=q.front(); //维护g[] f[i]=f[g[i]]+1; //转移f[] while(!q.empty()&amp;&amp;f[q.back()]&gt;f[i]) q.pop_back(); //维护单调队列 q.push_back(i); } if(f[n]&gt;n){ write(-1); //走不到n则无解 return 0; } for(;n;n=g[n]) ans.push_back(n-g[n]); //倒着类链表便利g[] for(int i=ans.size()-1;i&gt;=0;i--) write(ans[i]),putchar(&#39; &#39;); //再倒着输出步数 }","categories":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}],"tags":[{"name":"dp","slug":"dp","permalink":"http://blog.yzcthinktwice.com/tags/dp/"},{"name":"AtCoder","slug":"AtCoder","permalink":"http://blog.yzcthinktwice.com/tags/AtCoder/"},{"name":"单调队列","slug":"单调队列","permalink":"http://blog.yzcthinktwice.com/tags/单调队列/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}]},{"title":"ABC146E Rem of Sum is Num","slug":"ABC146E Rem of Sum is Num","date":"2019-11-24T14:31:01.000Z","updated":"2019-11-25T11:49:22.800Z","comments":true,"path":"2019/11/24/ABC146E Rem of Sum is Num/","link":"","permalink":"http://blog.yzcthinktwice.com/2019/11/24/ABC146E Rem of Sum is Num/","excerpt":"","text":"ABC146E Rem of Sum is Num 一道巧妙的思维题，考验了对数学式的转化 题意:给出一个数列和常数k，求合法子序列的个数 其中合法子序列需要满足： \\sum_{i}^{j}{a_i} \\equiv j-i+1\\ \\left (\\mod k \\right ) 题解：比赛时毫无思路，赛后看了题解茅塞顿开 让我们来转化这个需要满足的式子，其中规定$s_i$表示1-i的前缀和： \\sum_{i}^{j}{a_i} \\equiv j-i+1 \\ (\\mod k )s_j - s_{i-1} \\equiv j-(i-1) \\ (\\mod k )s_j - s_i \\equiv j-i \\ (\\mod k )s_i-i = s_j-j \\ (j-i","categories":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}],"tags":[{"name":"AtCoder","slug":"AtCoder","permalink":"http://blog.yzcthinktwice.com/tags/AtCoder/"},{"name":"数学","slug":"数学","permalink":"http://blog.yzcthinktwice.com/tags/数学/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}]},{"title":"CF1223C Save the Nature","slug":"CF1223C Save the Nature","date":"2019-11-22T01:16:01.000Z","updated":"2019-11-24T00:59:19.680Z","comments":true,"path":"2019/11/22/CF1223C Save the Nature/","link":"","permalink":"http://blog.yzcthinktwice.com/2019/11/22/CF1223C Save the Nature/","excerpt":"","text":"CF1223C Save the Nature 本文给出$O(nlog^2n)$和$O(nlogn)$的算法 首先二分答案的思路由询问内容的单调性可得，十分好想，一只log 重点在于check部分，有两种思路 1. 暴力sort两只log (156ms)思维难度低，代码难度低 关键是出题人没来卡 先O(n)扫一遍，得到每天的贡献（百分比） O(nlogn)从大到小排序，与每天的值配对 bool check(int n){ int sum=0; for(int i=1;i&lt;=n;i++){ b[i]=0; if(i%al==0) b[i]+=x; //有第一种贡献 if(i%be==0) b[i]+=y; //有第二种贡献 } sort(b+1,b+1+n,greater&lt;int&gt;()); //greater&lt;int&gt;()是自带的一个比较函数，用来从大到小排 for(int i=1;i&lt;=n;i++) sum+=a[i]*b[i]; //a[]在main()中均已除以100，直接暴力配对 return sum&gt;=k; } 2. lcm容斥一只log (62ms)跑的飞快，毕竟正解 我们发现如果有贡献，只有三种情况，即a的倍数,b的倍数,lcm(a,b)的倍数 方便起见，先做这么一件事： if(x&lt;y) swap(x,y),swap(al,be); 这样就保证lcm优于a,a优于b了 用除法算出a,b,lcm各有几个记为xn,yn,xyn 由容斥原理可得xn,yn都要减去xyn 使得可以保证a,b,lcm贡献互不相交 然后分三段按照lcm(x+y),a(x),b(y)的顺序扫一遍即可 bool check(int n){ int sum=0,xn=n/al,yn=n/be,xyn=n/lcm; //除法计算 xn-=xyn; //容斥 yn-=xyn; for(int i=1;i&lt;=xyn;i++) sum+=(x+y)*a[i]; //lcm段 for(int i=xyn+1;i&lt;=xyn+xn;i++) sum+=x*a[i]; //a段 for(int i=xyn+xn+1;i&lt;=xyn+xn+yn;i++) sum+=y*a[i]; //b段 return sum&gt;=k; } 代码两只log#include &lt;bits/stdc++.h&gt; using namespace std; template&lt;class t&gt; inline t read(t &amp;x){ x=0;char c=getchar();bool f=0; while(!isdigit(c)) f|=c==&#39;-&#39;,c=getchar(); while(isdigit(c)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(c^48),c=getchar(); if(f) x=-x;return x; } template&lt;class t&gt; inline void write(t x){ if(x&lt;0){putchar(&#39;-&#39;),write(-x);} else{if(x&gt;9)write(x/10);putchar(&#39;0&#39;+x%10);} } #define int long long const int N=2e5+5; int q,n,a[N],b[N],k,x,y,be,al; bool check(int n){ int sum=0; for(int i=1;i&lt;=n;i++){ b[i]=0; if(i%al==0) b[i]+=x; if(i%be==0) b[i]+=y; } sort(b+1,b+1+n,greater&lt;int&gt;()); for(int i=1;i&lt;=n;i++) sum+=a[i]*b[i]; return sum&gt;=k; } void doit(){ read(n); for(int i=1;i&lt;=n;i++) read(a[i]),a[i]/=100; sort(a+1,a+1+n,greater&lt;int&gt;()); read(x);read(al); read(y);read(be); read(k); int l=1,r=n,ans=-1; while(l&lt;=r){ int mid=l+r&gt;&gt;1; if(check(mid)) ans=mid,r=mid-1; else l=mid+1; } write(ans);puts(&quot;&quot;); } signed main(){ read(q); while(q--) doit(); } 一只log#include &lt;bits/stdc++.h&gt; using namespace std; template&lt;class t&gt; inline t read(t &amp;x){ x=0;char c=getchar();bool f=0; while(!isdigit(c)) f|=c==&#39;-&#39;,c=getchar(); while(isdigit(c)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(c^48),c=getchar(); if(f) x=-x;return x; } template&lt;class t&gt; inline void write(t x){ if(x&lt;0){putchar(&#39;-&#39;),write(-x);} else{if(x&gt;9)write(x/10);putchar(&#39;0&#39;+x%10);} } #define int long long const int N=2e5+5; int q,n,a[N],b[N],k,x,y,be,al,lcm; bool check(int n){ int sum=0,xn=n/al,yn=n/be,xyn=n/lcm; xn-=xyn; yn-=xyn; for(int i=1;i&lt;=xyn;i++) sum+=(x+y)*a[i]; for(int i=xyn+1;i&lt;=xyn+xn;i++) sum+=x*a[i]; for(int i=xyn+xn+1;i&lt;=xyn+xn+yn;i++) sum+=y*a[i]; return sum&gt;=k; } void doit(){ read(n); for(int i=1;i&lt;=n;i++) read(a[i]),a[i]/=100; sort(a+1,a+1+n,greater&lt;int&gt;()); read(x);read(al); read(y);read(be); if(x&lt;y) swap(x,y),swap(al,be); lcm=al*be/__gcd(al,be); read(k); int l=1,r=n,ans=-1; while(l&lt;=r){ int mid=l+r&gt;&gt;1; if(check(mid)) ans=mid,r=mid-1; else l=mid+1; } write(ans);puts(&quot;&quot;); } signed main(){ read(q); while(q--) doit(); }","categories":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}],"tags":[{"name":"CF","slug":"CF","permalink":"http://blog.yzcthinktwice.com/tags/CF/"},{"name":"二分答案","slug":"二分答案","permalink":"http://blog.yzcthinktwice.com/tags/二分答案/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}]},{"title":"CF949C Data Center Maintenance","slug":"CF949C Data Center Maintenance","date":"2019-11-21T06:36:01.000Z","updated":"2019-11-24T00:59:07.046Z","comments":true,"path":"2019/11/21/CF949C Data Center Maintenance/","link":"","permalink":"http://blog.yzcthinktwice.com/2019/11/21/CF949C Data Center Maintenance/","excerpt":"","text":"CF949C Data Center Maintenance 这题如果没有搞清楚题意，其实结论是并不“显然”的 题目其实是让你主动推迟有且仅有一个点，并将所有会因此受影响的点也都连锁着推迟下去，问最少会有几个点推迟 注意这个”主动推迟“，这意味着即使已经满足条件了你还是得要推迟一个点 搞懂了题意，接下来的思路就好理解了 我们发现“推迟”是一种单向关系，即，如果我使你不得不推迟，而你却不会使我不得不推迟 将这种单向关系转成图论的单向边 边的是否添加，即询问两者的是否满足 u_x +1 \\equiv x_y \\ \\ ( mod {h} )发现一个点只要有出度那它肯定不是最优的 如A-&gt;B，选A必带B，选B可无A 所以首先可以确定答案节点没有出度的 其次，由于强联通分量里的点都是可以互相到达的，所以只要其一推迟，另外的都得推迟 于是缩点，经保留size 问题变成在DAG上找一个没有出度的最小的点 $O(n)$扫一遍即可 #include &lt;bits/stdc++.h&gt; using namespace std; template&lt;class t&gt; inline t read(t &amp;x){ x=0;char c=getchar();bool f=0; while(!isdigit(c)) f|=c==&#39;-&#39;,c=getchar(); while(isdigit(c)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(c^48),c=getchar(); if(f) x=-x;return x; } template&lt;class t&gt; inline void write(t x){ if(x&lt;0){putchar(&#39;-&#39;),write(-x);} else{if(x&gt;9)write(x/10);putchar(&#39;0&#39;+x%10);} } const int N=1e5+5; int h[N],en,H,n,m,scc[N],dfn[N],low[N],st[N],lim,cnt,du[N],sn,ans,sz[N],a[N]; bool v[N]; struct edge{ int n,u,v; }e[N]; void add(int x,int y){ e[++en]=(edge){h[x],x,y}; h[x]=en; } void tarjan(int x){ //找强联通分量 low[x]=dfn[x]=++cnt; v[x]=1; st[++lim]=x; for(int i=h[x];i;i=e[i].n){ int y=e[i].v; if(!dfn[y]){ tarjan(y); low[x]=min(low[x],low[y]); } else{ if(v[y]) low[x]=min(low[x],dfn[y]); } } if(low[x]==dfn[x]){ int top; sn++; for(;;){ top=st[lim--]; scc[top]=sn; v[top]=0; sz[sn]++; if(top==x) return ; } } } signed main(){ read(n);read(m);read(H); for(int i=1;i&lt;=n;i++) read(a[i]); for(int i=1,x,y;i&lt;=m;i++){ read(x);read(y); if((a[x]+1)%H==a[y]) add(x,y); //边的添加（关系的判断） if((a[y]+1)%H==a[x]) add(y,x); } for(int i=1;i&lt;=n;i++) if(!dfn[i]) tarjan(i); for(int i=1;i&lt;=en;i++){ int x=scc[e[i].u],y=scc[e[i].v]; //根据原先加的边判定出度 if(x^y) du[x]++; } sz[0]=0x3f3f3f3f; for(int i=1;i&lt;=sn;i++) if(!du[i]){ if(sz[i]&lt;sz[ans]) ans=i; //取无出度节点的最小size } write(sz[ans]);puts(&quot;&quot;); for(int i=1;i&lt;=n;i++) if(scc[i]==ans) //是这个强联通分量的就输出 write(i),putchar(&#39; &#39;); }","categories":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}],"tags":[{"name":"CF","slug":"CF","permalink":"http://blog.yzcthinktwice.com/tags/CF/"},{"name":"tarjan","slug":"tarjan","permalink":"http://blog.yzcthinktwice.com/tags/tarjan/"},{"name":"强联通分量","slug":"强联通分量","permalink":"http://blog.yzcthinktwice.com/tags/强联通分量/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}]},{"title":"P1156 垃圾陷阱","slug":"P1156 垃圾陷阱","date":"2019-11-19T01:22:45.000Z","updated":"2019-11-24T01:25:38.053Z","comments":true,"path":"2019/11/19/P1156 垃圾陷阱/","link":"","permalink":"http://blog.yzcthinktwice.com/2019/11/19/P1156 垃圾陷阱/","excerpt":"","text":"P1156 垃圾陷阱 先将垃圾按时间排序 分类讨论 先假设能逃出去 设f[i][j]表示前i个垃圾叠成高度j时的最长生存时间 初始f[0][0]=10 类背包转移 注意濒死也是能转移的，即f[][]&lt;0才无法转移 转移时超过高度就输出当前时间 再模拟逃不出去 计算最长存活时间 #include &lt;bits/stdc++.h&gt; using namespace std; template&lt;class t&gt; inline t read(t &amp;x){ x=0;char c=getchar();bool f=0; while(!isdigit(c)) f|=c==&#39;-&#39;,c=getchar(); while(isdigit(c)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(c^48),c=getchar(); if(f) x=-x;return x; } template&lt;class t&gt; inline void write(t x){ if(x&lt;0){putchar(&#39;-&#39;),write(-x);} else{if(x&gt;9)write(x/10);putchar(&#39;0&#39;+x%10);} } const int N=105,M=105; int n,m,f[N][M]; struct trash{ int t,f,h; inline bool operator &lt; (const trash &amp;nt) const { return t&lt;nt.t; } }a[N]; signed main(){ read(m);read(n); for(int i=1;i&lt;=n;i++){ read(a[i].t); read(a[i].f); read(a[i].h); } sort(a+1,a+1+n); memset(f,-1,sizeof f); f[0][0]=10; for(int i=1;i&lt;=n;i++){ for(int j=0;j&lt;=m;j++) if(f[i-1][j]&gt;=0){ if(j+a[i].h&gt;=m&amp;&amp;f[i-1][j]+a[i-1].t&gt;=a[i].t){ write(a[i].t); return 0; } if(f[i-1][j]+a[i-1].t&gt;=a[i].t){ f[i][j+a[i].h]=f[i-1][j]+a[i-1].t-a[i].t; f[i][j]=max(f[i][j],f[i-1][j]+a[i-1].t-a[i].t+a[i].f); } } } m=10; for(int i=1;i&lt;=n;i++){ if(m+a[i-1].t&lt;a[i].t){ write(m+a[i-1].t); return 0; } m-=a[i].t-a[i-1].t; m+=a[i].f; } write(m+a[n].t); }","categories":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}],"tags":[{"name":"洛谷","slug":"洛谷","permalink":"http://blog.yzcthinktwice.com/tags/洛谷/"},{"name":"dp","slug":"dp","permalink":"http://blog.yzcthinktwice.com/tags/dp/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}]},{"title":"P1220 关路灯","slug":"P1220 关路灯","date":"2019-11-19T00:34:04.000Z","updated":"2019-11-24T01:18:30.241Z","comments":true,"path":"2019/11/19/P1220 关路灯/","link":"","permalink":"http://blog.yzcthinktwice.com/2019/11/19/P1220 关路灯/","excerpt":"","text":"P1220 关路灯 已被关的区间是封闭连续的，加之还要知道人是在左端点还是在右端点， 所以设f[i][j][0/1]表示现在[i,j]被关闭的最小花费，且0人在左端点，1人在右端点 初始f[st][st][0/1]=0，其他=oo 转移的费用通过两点路程差*左右两段未被关的区间的功率之和 功率和可通过前缀和计算 ans=min(f[1][n][0],f[1][n][1]) #include &lt;bits/stdc++.h&gt; using namespace std; template&lt;class t&gt; inline t read(t &amp;x){ x=0;char c=getchar();bool f=0; while(!isdigit(c)) f|=c==&#39;-&#39;,c=getchar(); while(isdigit(c)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(c^48),c=getchar(); if(f) x=-x;return x; } template&lt;class t&gt; inline void write(t x){ if(x&lt;0){putchar(&#39;-&#39;),write(-x);} else{if(x&gt;9)write(x/10);putchar(&#39;0&#39;+x%10);} } const int N=55; int n,st,p[N],s[N],f[N][N][2]; inline int que(int l,int r){ return s[r]-s[l-1]; } signed main(){ read(n);read(st); for(int i=1;i&lt;=n;i++){ read(p[i]); read(s[i]); s[i]+=s[i-1]; } for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) if(i!=st||j!=st) f[i][j][0]=f[i][j][1]=0x3f3f3f3f; for(int j=st;j&lt;=n;j++) for(int i=j-1;i&gt;=1;i--){ f[i][j][0]=min(f[i+1][j][0]+(p[i+1]-p[i])*(que(1,i)+que(j+1,n)),f[i+1][j][1]+(p[j]-p[i])*(que(1,i)+que(j+1,n))); f[i][j][1]=min(f[i][j-1][0]+(p[j]-p[i])*(que(1,i-1)+que(j,n)),f[i][j-1][1]+(p[j]-p[j-1])*(que(1,i-1)+que(j,n))); } write(min(f[1][n][0],f[1][n][1])); }","categories":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}],"tags":[{"name":"洛谷","slug":"洛谷","permalink":"http://blog.yzcthinktwice.com/tags/洛谷/"},{"name":"dp","slug":"dp","permalink":"http://blog.yzcthinktwice.com/tags/dp/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}]},{"title":"P1373 小a和uim之大逃离","slug":"P1373 小a和uim之大逃离","date":"2019-11-18T23:53:01.000Z","updated":"2019-11-24T01:12:26.968Z","comments":true,"path":"2019/11/19/P1373 小a和uim之大逃离/","link":"","permalink":"http://blog.yzcthinktwice.com/2019/11/19/P1373 小a和uim之大逃离/","excerpt":"","text":"P1373 小a和uim之大逃离 f[i][j][p][0/1]表示到(i,j)时两人差为p且最后一步是0/1走的的方案数, 初始f[i][j][a[i][j]][0]=1 ans=sum{f[i][j][0][1]} #include &lt;bits/stdc++.h&gt; using namespace std; template&lt;class t&gt; inline t read(t &amp;x){ x=0;char c=getchar();bool f=0; while(!isdigit(c)) f|=c==&#39;-&#39;,c=getchar(); while(isdigit(c)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(c^48),c=getchar(); if(f) x=-x;return x; } template&lt;class t&gt; inline void write(t x){ if(x&lt;0){putchar(&#39;-&#39;),write(-x);} else{if(x&gt;9)write(x/10);putchar(&#39;0&#39;+x%10);} } const int mod=1e9+7; const int N=805; int n,m,k,f[N][N][18][2],a[N][N]; long long ans; signed main(){ read(n);read(m);read(k);k++; for(int i=1;i&lt;=n;i++){ for(int j=1;j&lt;=m;j++){ read(a[i][j]); f[i][j][a[i][j]][0]=1; } } for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=m;j++) for(int p=0;p&lt;k;p++){ if(i&gt;1){ (f[i][j][p][0]+=f[i-1][j][(p-a[i][j]+k)%k][1])%=mod; (f[i][j][p][1]+=f[i-1][j][(p+a[i][j])%k][0])%=mod; } if(j&gt;1){ (f[i][j][p][0]+=f[i][j-1][(p-a[i][j]+k)%k][1])%=mod; (f[i][j][p][1]+=f[i][j-1][(p+a[i][j])%k][0])%=mod; } } for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=m;j++) (ans+=f[i][j][0][1])%=mod; write(ans); }","categories":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}],"tags":[{"name":"洛谷","slug":"洛谷","permalink":"http://blog.yzcthinktwice.com/tags/洛谷/"},{"name":"dp","slug":"dp","permalink":"http://blog.yzcthinktwice.com/tags/dp/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}]},{"title":"P3398 仓鼠找sugar","slug":"P3398 仓鼠找sugar","date":"2019-11-12T13:33:01.000Z","updated":"2019-11-13T13:03:09.712Z","comments":true,"path":"2019/11/12/P3398 仓鼠找sugar/","link":"","permalink":"http://blog.yzcthinktwice.com/2019/11/12/P3398 仓鼠找sugar/","excerpt":"","text":"P3398 仓鼠找sugar 模板题，询问树上两链是否有交 算法：给出性质：若两树链有交，则必有其中一条链的端点的lca在另一条链上，记为P 由这个性质题目一下变水了。。。 那如何判断一个点是否在一条链上呢？ 设a-b链lca为c，x-y链lca为z，且$d_c&gt;d_z$ WAY1. dis(x,a)+dis(x,b)=dis(a,b)显然的，不等就成三角形了 read(x),read(y),read(u),read(v); int z=lca(x,y),w=lca(u,v); if(d[z]&gt;d[w]){ swap(x,u); swap(y,v); swap(z,w); } if(dis(w,x)+dis(w,y)==dis(x,y)) puts(&quot;Y&quot;); else puts(&quot;N&quot;); WAY2. x是x-a的lca或x是x-b的lca反证易得 read(x),read(y),read(u),read(v); int z=lca(x,y),w=lca(u,v); if(d[z]&gt;d[w]){ swap(x,u); swap(y,v); swap(z,w); } if(lca(w,x)==w||lca(w,y)==w) puts(&quot;Y&quot;); else puts(&quot;N&quot;); 证明：当然手画树猜结论是大多数人的选择 我们容易发现，如果相交，记 $x=lca(a,b)$,$y=lca(c,d)$，则必有x在c-d路径上或y在a-b路径上 首先易知两点的lca在其路径上。如果路径相交，那么x要么在相交的路径上，要么不在。我们不妨记相交的那段为e-f 如果不在，由对称性，不妨设x靠近a，那么有a到x深度递减，b到e、e到f、f到x深度递减；同样，肯定有c到f、d到e深度递减，由此可知，y必定为f，由此得证 代码：#include &lt;bits/stdc++.h&gt; using namespace std; template&lt;class t&gt; inline t read(t &amp;x){ char c=getchar();bool f=0;x=0; while(!isdigit(c)) f|=c==&#39;-&#39;,c=getchar(); while(isdigit(c)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(c^48),c=getchar(); if(f) x=-x;return x; } template&lt;class t&gt; inline void write(t x){ if(x&lt;0) putchar(&#39;-&#39;),write(-x); else{if(x&gt;9) write(x/10);putchar(&#39;0&#39;+x%10);} } const int N=1e5+5,M=N&lt;&lt;1; int n,m,en,h[N],s[N],sz[N],f[N],top[N],d[N]; struct edge{int n,v;}e[M]; inline void add(const int &amp;x,const int &amp;y){ e[++en]=(edge){h[x],y}; h[x]=en; } void dfs1(int x){ sz[x]=1; d[x]=d[f[x]]+1; for(int i=h[x];i;i=e[i].n){ int y=e[i].v; if(y==f[x]) continue; f[y]=x; dfs1(y); sz[x]+=sz[y]; if(sz[s[x]]&lt;sz[y]) s[x]=y; } } void dfs2(int x,int TOP){ top[x]=TOP; if(s[x]) dfs2(s[x],TOP); for(int i=h[x];i;i=e[i].n){ int y=e[i].v; if(y==f[x]||y==s[x]) continue; dfs2(y,y); } } inline int lca(int x,int y){ while(top[x]^top[y]) if(d[top[x]]&gt;d[top[y]]) x=f[top[x]]; else y=f[top[y]]; return d[x]&lt;d[y]?x:y; } void doit(){ int x,y,u,v; read(x),read(y),read(u),read(v); int z=lca(x,y),w=lca(u,v); if(d[z]&gt;d[w]){ swap(x,u); swap(y,v); swap(z,w); } if(lca(w,x)==w||lca(w,y)==w) puts(&quot;Y&quot;); else puts(&quot;N&quot;); } signed main(){ read(n);read(m); for(int i=1,x,y;i&lt;n;i++){ read(x);read(y); add(x,y); add(y,x); } dfs1(1); dfs2(1,1); while(m--) doit(); }","categories":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}],"tags":[{"name":"洛谷","slug":"洛谷","permalink":"http://blog.yzcthinktwice.com/tags/洛谷/"},{"name":"LCA","slug":"LCA","permalink":"http://blog.yzcthinktwice.com/tags/LCA/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}]},{"title":"nim游戏及变体","slug":"nim游戏及变体","date":"2019-11-11T13:58:01.000Z","updated":"2019-11-11T14:43:37.735Z","comments":true,"path":"2019/11/11/nim游戏及变体/","link":"","permalink":"http://blog.yzcthinktwice.com/2019/11/11/nim游戏及变体/","excerpt":"","text":"PART1. 经典nim出处 问题：有n堆石子，两个人可以从任意一堆石子中拿任意多个石子(不能不拿)，没法拿的人失败。问谁会胜利 算法：若每堆石子数的异或和不为0，则先手必胜 证明：由于nim游戏的sg值与石子数相等，所以由SG定理可以方便的得到 例题：P2197 【模板】nim游戏 PART2. 分裂nim出处 新规则：每次取完石子后，可以将取的那一堆的石子 分为多堆，也可以不分 算法：与经典无异 证明：如果异或和不为0，那先手不用分某一堆石子，同Nim游戏 如果异或和为0， 不执行分裂操作则先手必败，同Nim游戏 若执行分裂操作，如果能够证明执行分裂操作的后继局面异或和依然不为0，那么结论成立 采用反证法，证明如果分裂后异或和为0 会产生矛盾 a1 xor a2 xor a3 xor ……xor an=0 a1=a2 xor a3 xor ……xor an 假设我们取的那一堆是第1堆，取完之后还有b1个，b1&lt;a1 将b1分为x+y 若x xor y xor a2 xor a3 xor ……xor an=0 则 x xor y=a2 xor a3 xor …… xor an 所以x xor y = a1 又因为异或是不进位的加法，所以x xor y&lt;=b1&lt;a1产生矛盾 PART3. 阶梯nim出处 新规则：取的石子不是拿出而是从第i堆放入第i-1堆 算法：将每个奇数位置的数x看成一堆有x个石子的石子堆，然后玩Nim游戏。 证明： 拿走某一堆石子的一部分，相当于将某个奇位置的石子移动到它左边的偶位置上。 如果大家都只动奇位置的石子，那么这等价于两人在玩Nim游戏。 但如果有人想打破规则呢？ 假设Nim游戏先手必胜，那么先手肯定优先玩Nim游戏；如果后手试图破坏局面，将某个偶位置上的若干石子移动到了左边的奇位置i上，那么先手可以将这若干个刚移到i的石子继续移动到i左边的偶位置上，对Nim局面依然没有任何影响，除非后手回头来继续动奇位置的石子，那也只能是输。 那么如果Nim游戏先手必败，也是同理，后手可以用相同的方式迫使先手玩Nim游戏，直到输为止。 因此，奇数位置的石子的相关信息，就直接决定了阶梯Nim问题的结果。 例题：POJ1704 Georgia and Bob PART4. 树上阶梯nim新规则：在阶梯nim的基础上赋予各节点树的顺序 算法：对深度为奇数的所有点玩Nim游戏。 证明： 根据SG定理，在阶梯nim的基础上做异或合并即可 例题： 这个文档的T3","categories":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}],"tags":[{"name":"博弈论","slug":"博弈论","permalink":"http://blog.yzcthinktwice.com/tags/博弈论/"},{"name":"教程","slug":"教程","permalink":"http://blog.yzcthinktwice.com/tags/教程/"},{"name":"nim游戏","slug":"nim游戏","permalink":"http://blog.yzcthinktwice.com/tags/nim游戏/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}]},{"title":"LIS，LCS与树状数组","slug":"LIS，LCS与树状数组","date":"2019-11-03T12:50:01.000Z","updated":"2019-11-03T13:58:10.651Z","comments":true,"path":"2019/11/03/LIS，LCS与树状数组/","link":"","permalink":"http://blog.yzcthinktwice.com/2019/11/03/LIS，LCS与树状数组/","excerpt":"","text":"模拟赛中出到了类似题，特意在网上搜索学习，并有所感想 本文由此获得启发，特此感谢 PART1. LIS从P1439 【模板】最长公共子序列开始 50pt的$O(n^2)$算法很容易想，即设f[i]表示到i结束的最长LIS的长度 f[i]=\\max \\left \\{ f[j] | a_j","categories":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}],"tags":[{"name":"教程","slug":"教程","permalink":"http://blog.yzcthinktwice.com/tags/教程/"},{"name":"LIS","slug":"LIS","permalink":"http://blog.yzcthinktwice.com/tags/LIS/"},{"name":"LCS","slug":"LCS","permalink":"http://blog.yzcthinktwice.com/tags/LCS/"},{"name":"树状数组","slug":"树状数组","permalink":"http://blog.yzcthinktwice.com/tags/树状数组/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}]},{"title":"P3657 [USACO17FEB]Why Did the Cow Cross the Road II P","slug":"P3657 [USACO17FEB]Why Did the Cow Cross the Road II P","date":"2019-11-03T12:28:01.000Z","updated":"2019-11-03T13:57:33.202Z","comments":true,"path":"2019/11/03/P3657 [USACO17FEB]Why Did the Cow Cross the Road II P/","link":"","permalink":"http://blog.yzcthinktwice.com/2019/11/03/P3657 [USACO17FEB]Why Did the Cow Cross the Road II P/","excerpt":"","text":"P3657 Why Did the Cow Cross the Road II P LCS是本题比较直观的一种思路，即将普通LCS（最长公共子序列）的相等的条件改为差的绝对值&lt;=4 众所周知，求LCS有两种$O(nlogn)$方法 一种是映射，另一种是DP优化 因为差的绝对值&lt;=4的条件会使映射变得复杂，我们这里采用DP优化的方法 该方法具体可以见[noip科普]关于LIS和一类可以用树状数组优化的DP 要注意的是，该方法中要记录b[]中各值可合法对应的值在a[]的位置，这个位置是需要通过排序来保证有序的 #include &lt;bits/stdc++.h&gt; using namespace std; template&lt;class t&gt; inline t read(t &amp;x){ char c=getchar();bool f=0;x=0; while(!isdigit(c)) f|=c==&#39;-&#39;,c=getchar(); while(isdigit(c)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(c^48),c=getchar(); if(f) x=-x;return x; } template&lt;class t&gt; inline void write(t x){ if(x&lt;0) putchar(&#39;-&#39;),write(-x); else{if(x&gt;9) write(x/10);putchar(&#39;0&#39;+x%10);} } const int N=1e5+5; int a[N],b[N],n,f[N],ans,pos[N]; vector&lt;int&gt; p[N]; struct BIT{ //树状数组模板 #define lowbit(x) (x&amp;(-x)) int a[N]; void up(int x,int v){ while(x&lt;=n){ a[x]=max(a[x],v); x+=lowbit(x); } } int que(int x){ int res=0; while(x){ res=max(res,a[x]); x-=lowbit(x); } return res; } }ma; signed main(){ read(n); for(int i=1,x;i&lt;=n;i++){ read(x); pos[x]=i; //记录某值的位置 } for(int i=1;i&lt;=n;i++){ read(b[i]); for(int j=max(1,b[i]-4);j&lt;=min(n,b[i]+4);j++) p[i].push_back(pos[j]); //记录b[]值合法对应值的位置 sort(p[i].begin(),p[i].end()); //排序使之保证有序 } for(int i=1;i&lt;=n;i++) for(int j=p[i].size()-1;j&gt;=0;j--){ //按位置搞LCS int pos=p[i][j]; f[pos]=ma.que(pos-1)+1; ma.up(pos,f[pos]); } for(int i=1;i&lt;=n;i++) ans=max(ans,f[i]); //得到答案 write(ans); }","categories":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}],"tags":[{"name":"洛谷","slug":"洛谷","permalink":"http://blog.yzcthinktwice.com/tags/洛谷/"},{"name":"LCS","slug":"LCS","permalink":"http://blog.yzcthinktwice.com/tags/LCS/"},{"name":"树状数组","slug":"树状数组","permalink":"http://blog.yzcthinktwice.com/tags/树状数组/"},{"name":"DP","slug":"DP","permalink":"http://blog.yzcthinktwice.com/tags/DP/"},{"name":"USACO","slug":"USACO","permalink":"http://blog.yzcthinktwice.com/tags/USACO/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}]},{"title":"CF上蓝！","slug":"CF上蓝！","date":"2019-11-01T23:30:00.000Z","updated":"2019-11-03T13:58:40.879Z","comments":true,"path":"2019/11/02/CF上蓝！/","link":"","permalink":"http://blog.yzcthinktwice.com/2019/11/02/CF上蓝！/","excerpt":"","text":"令人激动！ 自己动手，丰衣足食 CF round #597我终于上蓝了！ 每题都很有思路，除了最后的两个dp题 没有任何罚时，D甚至是洛谷原题（打井），并且没来卡kruskal。。。 挺幸运的，见这里 全球rating 272，涨了161分","categories":[{"name":"日记","slug":"日记","permalink":"http://blog.yzcthinktwice.com/categories/日记/"}],"tags":[{"name":"CF","slug":"CF","permalink":"http://blog.yzcthinktwice.com/tags/CF/"}],"keywords":[{"name":"日记","slug":"日记","permalink":"http://blog.yzcthinktwice.com/categories/日记/"}]},{"title":"CF1239D Catowice City","slug":"CF1239D Catowice City","date":"2019-10-29T14:11:01.000Z","updated":"2019-11-03T14:07:38.324Z","comments":true,"path":"2019/10/29/CF1239D Catowice City/","link":"","permalink":"http://blog.yzcthinktwice.com/2019/10/29/CF1239D Catowice City/","excerpt":"","text":"CF1239D Catowice City 说在前面的：其实本题在答案的统计上并没有另两篇题解讲的那么麻烦 如果你真正搞懂了tarjan，你会明白如果一个强连通分量有出边，由于它dfs的性质，一定会继续向下遍历，直到找到一个没有出度的强连通分量 因此，第一个被找到的强联通分量一定是没有出度的！ 这样其余两篇题解的做法在过程上还可以被大幅简化 题解首先，一个很简单的问题：为什么n个不可以都是猫呢？ 因为必须至少有一个人 那么我们就必须把这个人放到无法产生任何影响的地方去 即一个人群（或仅一个人） 这个人群必须满足不会再对后续产生影响（因为连猫不合法，连人不如换个部分做人群） 即无出度 同时人群中也要保持强联通，因为如果有人不强联通，他就可以被分离出看成猫 因此问题转化为在一个有向图中找一个没有出度的强连通分量 在这个没有出度的强联通分量里的都是人，否则是猫 而我之前又说过第一个被找到的强联通分量一定是没有出度的，因此编号为1的强连通分量就是我们要找的 另外，显然的，如果只有一个强连通分量就是不合法的 代码#include &lt;bits/stdc++.h&gt; using namespace std; template&lt;class t&gt; inline t read(t &amp;x){ char c=getchar();bool f=0;x=0; while(!isdigit(c)) f|=c==&#39;-&#39;,c=getchar(); while(isdigit(c)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(c^48),c=getchar(); if(f) x=-x;return x; } template&lt;class t&gt; inline void write(t x){ if(x&lt;0) putchar(&#39;-&#39;),write(-x); else{if(x&gt;9) write(x/10);putchar(&#39;0&#39;+x%10);} } const int N=1e6+5; int h[N],st[N],lim,dfn[N],low[N],cnt,en,scc[N],sn,n,m,t,sz[N]; bool v[N]; struct edge{int n,v;}e[N]; inline void add(int x,int y){e[++en]=(edge){h[x],y};h[x]=en;} void tarjan(int x){ //tarjan模板 v[x]=1; st[++lim]=x; dfn[x]=low[x]=++cnt; for(int i=h[x];i;i=e[i].n){ int y=e[i].v; if(!dfn[y]){ tarjan(y); low[x]=min(low[x],low[y]); } else{ if(v[y]) low[x]=min(low[x],dfn[y]); } } if(dfn[x]==low[x]){ int top; sn++; for(;;){ top=st[lim--]; v[top]=0; scc[top]=sn; sz[sn]++; //sz[]是强连通分量的大小 if(top==x) break; } } } void doit(){ read(n);read(m); sn=cnt=en=lim=0; for(int i=1;i&lt;=n;i++) h[i]=sz[i]=dfn[i]=0; for(int i=1,x,y;i&lt;=m;i++){ read(x);read(y); if(x==y) continue; //自己和自己的猫可忽略 add(x,y); } for(int i=1;i&lt;=n;i++) if(!dfn[i]) tarjan(i); if(sn==1){ //只有一个强连通分量，不合法 puts(&quot;No&quot;); return ; } printf(&quot;Yes\\n%d %d\\n&quot;,sz[1],n-sz[1]); //sz[1]是人的个数，减一减得到猫数 for(int i=1;i&lt;=n;i++) if(scc[i]==1) write(i),putchar(&#39; &#39;);puts(&quot;&quot;); //第一个的都是人 for(int i=1;i&lt;=n;i++) if(scc[i]!=1) write(i),putchar(&#39; &#39;);puts(&quot;&quot;); //否则是猫 } signed main(){ read(t); while(t--) doit(); } (ps.本题清零初始化用memset会T在第三个点，要改用for)","categories":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}],"tags":[{"name":"CF","slug":"CF","permalink":"http://blog.yzcthinktwice.com/tags/CF/"},{"name":"缩点","slug":"缩点","permalink":"http://blog.yzcthinktwice.com/tags/缩点/"},{"name":"强连通分量","slug":"强连通分量","permalink":"http://blog.yzcthinktwice.com/tags/强连通分量/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}]},{"title":"P3294 [SCOI2016]背单词","slug":"P3294 [SCOI2016]背单词","date":"2019-10-28T14:28:01.000Z","updated":"2019-11-03T12:32:31.509Z","comments":true,"path":"2019/10/28/P3294 [SCOI2016]背单词/","link":"","permalink":"http://blog.yzcthinktwice.com/2019/10/28/P3294 [SCOI2016]背单词/","excerpt":"","text":"P3294 【SCOI2016】背单词 题意（已用贪心思路简化）给定n个单词$s_i$，请重排序列，使每个单词的存在的后缀都在前面 设$s_j$为离$s_i$最近的后缀字符串 定义$a_i=i-j$ $ans=min(\\sum a_i)$ 题解后缀显然没有前缀来的容易处理，所以自然想到翻转每个单词，建出trie树 下面是个例子： 6 a ca ea gda hda ifb 1. 建出trie树(红点是颠倒后每个单词的末尾，注意根也是）： void ins(char *s){ int x=0; for(int i=0;s[i];i++){ if(!a[x].nt[s[i]-&#39;a&#39;]) a[x].nt[s[i]-&#39;a&#39;]=++cnt; x=a[x].nt[s[i]-&#39;a&#39;]; } a[x].tag=1; //tag==1说明是红点 } 2. 重构树跳过白点，保留红点（白点无用，可以忽略） void doit(int x){ if(a[x].tag&amp;&amp;x){ g[last[x]].push_back(x); //g[x][]存重构树中点x的儿子们 last[x]=x; //last[x]是原树里x节点上方离它最近的红点（包括自己） } for(int i=0;i&lt;26;i++) if(a[x].nt[i]){ last[a[x].nt[i]]=last[x]; doit(a[x].nt[i]); } } 3. dfs遍历重构树，并将直接祖先相同的子树按节点数从小到大排序 inline bool cmp(const int &amp;x,const int &amp;y){ return sz[x]&lt;sz[y]; } void dfs(int x){ sz[x]=1; //sz[x]是以x为根的子树的大小 for(int i=0;i&lt;g[x].size();i++){ dfs(g[x][i]); sz[x]+=sz[g[x][i]]; } sort(g[x].begin(),g[x].end(),cmp); } 4. 根据题意遍历重构树，用dfs序得到答案void getans(int x){ int dfn=cnt++; //dfn是父亲的dfs序，cnt是节点自己的dfs序 for(int i=0;i&lt;g[x].size();i++){ ans+=cnt-dfn; //两者相减就是题意里的ai getans(g[x][i]); } } 思路背后的理由Q1. 为什么题意可以这样简化？三条规则，规则一显然是可以被避免且没有后两种优的，规则二可以看做规则三的特殊情况，简单起见，只考虑规则三即可 Q2. 排序的正确性？花费与最后一个填入的后缀有关,那么这个后缀的位置离当前位置越近越好,也就是应该有尽量少的单词夹在两个中间,所以我们应该选下属单词最少的那个进行拓展，而下属单词的多少就等价于重构树中子树的大小。 Q3. dfs序的正确性？这里引用 @坐山客 的题解： 考虑重新建树之后，i节点的子树中的所有节点的后缀都是i 如果同一深度上有不止一棵子树，那么我们先在一棵上取出一个叶子节点j，再取出一个根节点i，我们发现如果j&gt;i的话肯定不如i&lt;j优秀 因为调整之后i的子树上所有节点对花费的贡献-=子树大小，j对花费的贡献+1，所以我们可以看到j&gt;i的花费&lt;=i&gt;j的情况 最后我们经过所有的调整可以发现序列变成了dfs序 所以dfs序最优 完整代码将以上各步骤代码合在一起就是： tips. ANS要用long long!!! #include &lt;bits/stdc++.h&gt; using namespace std; inline int read(int &amp;x){ char c=getchar();bool f=0;x=0; while(!isdigit(c)) f|=c==&#39;-&#39;,c=getchar(); while(isdigit(c)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(c^48),c=getchar(); if(f) x=-x;return x; } inline void write(long long x){ if(x&lt;0) putchar(&#39;-&#39;),write(-x); else{if(x&gt;9) write(x/10);putchar(&#39;0&#39;+x%10);} } const int L=5.1e5+5; struct node{ //trie树的每个节点 int nt[26]; bool tag; }; long long ans; int cnt,last[L],sz[L],n; vector&lt;int&gt; g[L]; char s[L]; struct trie{ //trie及所需操作 node a[L]; int cnt; void ins(char *s){ //建树 int x=0; for(int i=0;s[i];i++){ if(!a[x].nt[s[i]-&#39;a&#39;]) a[x].nt[s[i]-&#39;a&#39;]=++cnt; x=a[x].nt[s[i]-&#39;a&#39;]; } a[x].tag=1; } void doit(int x){ //重构树 if(a[x].tag&amp;&amp;x){ g[last[x]].push_back(x); last[x]=x; } for(int i=0;i&lt;26;i++) if(a[x].nt[i]){ last[a[x].nt[i]]=last[x]; doit(a[x].nt[i]); } } }tr; inline bool cmp(const int &amp;x,const int &amp;y){ return sz[x]&lt;sz[y]; } void dfs(int x){ //重排重构树 sz[x]=1; for(int i=0;i&lt;g[x].size();i++){ dfs(g[x][i]); sz[x]+=sz[g[x][i]]; } sort(g[x].begin(),g[x].end(),cmp); } void getans(int x){ //统计答案 int dfn=cnt++; for(int i=0;i&lt;g[x].size();i++){ ans+=cnt-dfn; getans(g[x][i]); } } signed main(){ read(n); for(int i=1;i&lt;=n;i++){ scanf(&quot;%s&quot;,s); reverse(s,s+strlen(s)); //反转单词 tr.ins(s); } tr.a[0].tag=1; //根也是红点 tr.doit(0); dfs(0); getans(0); write(ans); }","categories":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}],"tags":[{"name":"洛谷","slug":"洛谷","permalink":"http://blog.yzcthinktwice.com/tags/洛谷/"},{"name":"字典树","slug":"字典树","permalink":"http://blog.yzcthinktwice.com/tags/字典树/"},{"name":"贪心","slug":"贪心","permalink":"http://blog.yzcthinktwice.com/tags/贪心/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}]},{"title":"P2658 【汽车拉力比赛】","slug":"P2658 【汽车拉力比赛】","date":"2019-10-27T14:49:01.000Z","updated":"2019-11-03T12:32:16.255Z","comments":true,"path":"2019/10/27/P2658 【汽车拉力比赛】/","link":"","permalink":"http://blog.yzcthinktwice.com/2019/10/27/P2658 【汽车拉力比赛】/","excerpt":"","text":"P2658 【汽车拉力比赛】并查集的思路很多人已经讲过了，我这里提供几个并查集方法的（常数）优化 路径压缩&amp;按秩合并 int getf(int x){ if(f[x]==x) return x; return f[x]=getf(f[x]); } void unite(int x,int y){ int fx=getf(x),fy=getf(y); if(fx==fy) return; if(rk[fx]&lt;rk[fy]) f[fx]=fy; else f[fy]=fx; if(rk[fx]==rk[fy]) rk[fx]++; } 路径压缩应该很多人都加了吧。。。 四个方向（上下左右）-&gt;两个方向（下右） 边是双向的，而且是网格图，因此是有个层次性的，无需重复地双向都unite 将每个路标的fa与第一个路标的fa比较 可以节约一半的getf 另外，感觉自己的码风还挺好理解的。。。 #include &lt;bits/stdc++.h&gt; using namespace std; inline int read(int &amp;x){ char c=getchar();bool f=0;x=0; while(!isdigit(c)) f|=c==&#39;-&#39;,c=getchar(); while(isdigit(c)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(c^48),c=getchar(); if(f) x=-x;return x; } inline void write(int x){ if(x&lt;0) putchar(&#39;-&#39;),write(-x); else{if(x&gt;9) write(x/10);putchar(&#39;0&#39;+x%10);} } const int N=505; int n,m,f[N*N],ans,rk[N*N],a[N][N],l,r; vector&lt;int&gt; tag; inline int hash(int x,int y){ return (x-1)*m+y; } inline int getf(int x){ if(f[x]==x) return x; return f[x]=getf(f[x]); //路径压缩 } inline void unite(int x,int y){ int fx=getf(x),fy=getf(y); if(fx==fy) return; if(rk[fx]&lt;rk[fy]) f[fx]=fy; //按秩合并 else f[fy]=fx; if(rk[fx]==rk[fy]) rk[fx]++; } inline bool check(int k){ for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=m;j++) f[hash(i,j)]=hash(i,j),rk[hash(i,j)]=1; //并查集初始化 for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=m;j++){ if(abs(a[i][j]-a[i+1][j])&lt;=k&amp;&amp;i+1&lt;=n) //向下unite(hash(i,j),hash(i+1,j)); if(abs(a[i][j]-a[i][j+1])&lt;=k&amp;&amp;j+1&lt;=m) //向右 unite(hash(i,j),hash(i,j+1)); } int fa=getf(tag[0]); //先得到第一个fa for(int i=1;i&lt;tag.size();i++) if(getf(tag[i])!=fa) //后面的与第一个比较 return 0; return 1; } signed main(){ read(n);read(m); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=m;j++){ read(a[i][j]); r=max(r,a[i][j]); } for(int i=1;i&lt;=n;i++) for(int j=1,x;j&lt;=m;j++){ read(x); if(x) tag.push_back(hash(i,j)); //我用vector存路标 } while(l&lt;=r){ int mid=(l+r)&gt;&gt;1; if(check(mid)) r=mid-1,ans=mid; else l=mid+1; } write(ans); } 另外，我这份代码是用c++交的，c++11以上会ce","categories":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}],"tags":[{"name":"洛谷","slug":"洛谷","permalink":"http://blog.yzcthinktwice.com/tags/洛谷/"},{"name":"二分答案","slug":"二分答案","permalink":"http://blog.yzcthinktwice.com/tags/二分答案/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}]},{"title":"CF再次被skip","slug":"CF再次被skip","date":"2019-10-26T15:22:01.000Z","updated":"2019-11-03T13:58:39.138Z","comments":true,"path":"2019/10/26/CF再次被skip/","link":"","permalink":"http://blog.yzcthinktwice.com/2019/10/26/CF再次被skip/","excerpt":"","text":"时隔多日，今天又来打打CF，本来可以上蓝的说。。。 结果sb又把自己skip了，一晚上白给 自闭了QAQ","categories":[{"name":"日记","slug":"日记","permalink":"http://blog.yzcthinktwice.com/categories/日记/"}],"tags":[{"name":"CF","slug":"CF","permalink":"http://blog.yzcthinktwice.com/tags/CF/"}],"keywords":[{"name":"日记","slug":"日记","permalink":"http://blog.yzcthinktwice.com/categories/日记/"}]},{"title":"HDU5521 Meeting","slug":"HDU5521 Meeting","date":"2019-07-17T14:11:01.000Z","updated":"2019-11-10T09:06:07.797Z","comments":true,"path":"2019/07/17/HDU5521 Meeting/","link":"","permalink":"http://blog.yzcthinktwice.com/2019/07/17/HDU5521 Meeting/","excerpt":"","text":"HDU5521 Meeting 题意： 给你n个点，它们组成了m个团，第i个团内有si个点，且每个团内的点互相之间距离为ti，问如果同时从点1和点n出发，最短耗时多少相遇 很明显题目给出的是个无负环的图，且要跑出单源最短路，那不就是个dij吗 大方向定下，但图该怎么建呢？ way1:给每个团内的所有点两两暴力建边 如图所示：黑的为点，红的为团，相同颜色的边长度相等 共$\\sum ^{m}_{i=1}\\dfrac {1}{2}s_{i}\\left( s_{i}-1\\right)$条边 而题面又告诉我们$\\sum ^{m}_{i=1}s_{i}&lt;=10^6$ 边数1e12这谁顶得住啊QuQ way2:我们再看上面这张图，发现同个团内类似三角形的东西其实是不需要的，因为反正有更近的直接连接的边，为啥还要再去绕个圈去松弛操作呢？ 这时候我们就可以在每个团中建个虚点，改无向图为有向图，即实点可以0消耗到虚点，虚点要ti到实点 正如下图所示：蓝色的为虚点，灰色的为从实点到虚点的路径，长度为0；彩色的为从虚点到实点的路径，长度为ti 边数是不是被减少到了$\\sum ^{m}_{i=1}2s_{i}$？是不是很优秀？ 建完图后，分别以1和n为起点，跑一遍最短路 $Ans=min\\{max\\{点1到点i最短路,点n到点i最短路|1&lt;=i&lt;=n\\}\\}$ ps.这道题十分毒瘤，我提交后曾四次PE，输出请注意你的空格以及换行，避免冗余 typedef long long ll; const int N=2e5+5,M=4e6+5; int en,T,n,m,h[N],cnt,ans[N],nm; ll dis[2][N]; struct node{ int x; ll v; inline bool operator &lt; (const node &amp;nt) const {return v&gt;nt.v;} }; struct edge{int n,v;ll w;}e[M]; //前向星存边 inline void add(const int &amp;x,const int &amp;y,const ll &amp;z){e[++en]=(edge){h[x],y,z};h[x]=en;} void dij(int s){ //一个堆优dijkstra模板 int pos; //小技巧，提前判断好当前最短路应存进哪个dis[]数组 if(s==1) pos=0; else pos=1; priority_queue&lt;node&gt; q; memset(dis[pos],66,sizeof dis[pos]); q.push((node){s,0}); dis[pos][s]=0; while(!q.empty()){ node x=q.top(); q.pop(); if(x.v!=dis[pos][x.x]) continue; for(int i=h[x.x];i;i=e[i].n){ int y=e[i].v; if(dis[pos][x.x]+e[i].w&lt;dis[pos][y]){ dis[pos][y]=dis[pos][x.x]+e[i].w; q.push((node){y,dis[pos][y]}); } } } } signed main(){ scanf(&quot;%d&quot;,&amp;T); while(T--){ en=nm=0; memset(h,0,sizeof h); scanf(&quot;%d%d&quot;,&amp;n,&amp;m); for(int i=1,t,s;i&lt;=m;i++){ scanf(&quot;%d%d&quot;,&amp;t,&amp;s); int center=n+i; //虚点 for(int i=1,x;i&lt;=s;i++){ scanf(&quot;%d&quot;,&amp;x); add(x,center,0); //实点到虚点无长度 add(center,x,t); //虚点到实点有长度 } } dij(1); //从1跑 dij(n); //从n跑 ll MIN=dis[0][0]; for(int i=1;i&lt;=n;i++){ ll tp=max(dis[0][i],dis[1][i]); if(tp==MIN) ans[++nm]=i; //nm记录当前最优解共有几个，ans[]记录这些满足最优解的下标 if(tp&lt;MIN){ nm=1; //比当前最优解还优，刷新，重新从1开始 ans[1]=i; MIN=tp; } } printf(&quot;Case #%d: &quot;,++cnt); if(MIN==dis[0][0]) printf(&quot;Evil John\\n&quot;); //没有最优解-&gt;即无解 else{ printf(&quot;%lld\\n&quot;,MIN); for(int i=1;i&lt;=nm;i++) if(i&lt;nm) printf(&quot;%d &quot;,ans[i]); else printf(&quot;%d\\n&quot;,ans[i]); //最后一个后无空格 } } }","categories":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}],"tags":[{"name":"HDU","slug":"HDU","permalink":"http://blog.yzcthinktwice.com/tags/HDU/"},{"name":"最短路","slug":"最短路","permalink":"http://blog.yzcthinktwice.com/tags/最短路/"},{"name":"思维","slug":"思维","permalink":"http://blog.yzcthinktwice.com/tags/思维/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}]},{"title":"CF1194D 1-2-K Game","slug":"CF1194D 1-2-K Game","date":"2019-07-15T14:11:01.000Z","updated":"2019-11-13T13:03:15.605Z","comments":true,"path":"2019/07/15/CF1194D 1-2-K Game/","link":"","permalink":"http://blog.yzcthinktwice.com/2019/07/15/CF1194D 1-2-K Game/","excerpt":"","text":"CF1194D 1-2-K Game 首先让我们考虑没有k的情况： 1. (n mod 3 =0)因为n可以被分解成若干个3相加 而每个3可以被分解为1+2或2+1 所以无论A出什么B都有方法应对 B胜 2. (n mod 3 =1)A可以先选择余数1 这样问题又回到了第一种情况 AB角色互换 A胜 3. (n mod 3 =2)与2同理，A先选2即胜 而现在多出来的这个k也可以看成是3的某个自然数倍数加上一个小于3的数 即$k\\equiv x\\left( mod3\\right)$ 我们再来对x分类讨论： 1. (x=0)此时的k就好像快速地切除1+2或2+1的回合 但对手总不会站着不动吧？ 我们知道B总是有方法使每一回合内(A+B)%3都等于1的 列举一下(k用3代替)： A:1 B:3 A:2 B:2 A:3 B:1 是不是每回合在mod3意义下都是相同的？ 那么若干个回合后如果无法实现上述方法了 即n%=k+1 如果n=k A获胜 否则情况又变回了无k的情况 %3判断即可 2. (x=1)此时k就好像有着能省略若干个回合功能的1 k就可有可无了 又回到了无k的情况 3. (x=2)与2同理 知道了这些，代码就很好写了： int n,k,t; signed main(){ scanf(&quot;%d&quot;,&amp;t); while(t--){ scanf(&quot;%d%d&quot;,&amp;n,&amp;k); if(k%3){ if(n%3) puts(&quot;Alice&quot;); else puts(&quot;Bob&quot;); } else{ n%=k+1; if(n==k||n%3) puts(&quot;Alice&quot;); else puts(&quot;Bob&quot;); } } }","categories":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}],"tags":[{"name":"CF","slug":"CF","permalink":"http://blog.yzcthinktwice.com/tags/CF/"},{"name":"博弈论","slug":"博弈论","permalink":"http://blog.yzcthinktwice.com/tags/博弈论/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"http://blog.yzcthinktwice.com/categories/算法/"}]}]}